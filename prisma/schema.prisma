// This is your Prisma schema file for Supabase integration
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Settings table for admin configuration
model Settings {
  id          String   @id @default(cuid())
  category    String   // 'supabase', 'email', 'env', 'general'
  key         String   
  value       String
  description String?
  isEncrypted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([category, key])
  @@map("settings")
}

// Enhanced User model with Supabase auth integration
model User {
  id            String    @id @default(cuid())
  supabaseId    String?   @unique // Link to Supabase auth user
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For local auth fallback
  role          Role      @default(STUDENT)
  phone         String?
  dateOfBirth   DateTime?
  address       String?
  city          String?
  postalCode    String?
  emergencyContact String?
  emergencyPhone   String?
  notes         String?
  isActive      Boolean   @default(true)

  // Additional fields for enhanced functionality
  personalNumber String?   // Swedish personnummer
  licenseNumber  String?   // Driving license number
  licenseType    String?   // License type (B, BE, etc.)
  licenseExpiry  DateTime? // License expiry date
  medicalCertExpiry DateTime? // Medical certificate expiry
  preferredLanguage String? @default("sv") // Language preference
  marketingConsent Boolean @default(false) // Marketing consent

  // Instructor specific fields
  instructorId   String?   // Instructor certification ID
  specializations String[] // Areas of specialization
  hourlyRate     Decimal?  @db.Decimal(10, 2) // Hourly rate for instructors
  availability   Json?     // Weekly availability schedule

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  credits       Credit[]
  lessonPlanning LessonPlanning[]
  blockedSlots  BlockedSlot[]

  // Schedule Management relations
  schedules     Schedule[]
  workingHours  WorkingHours[]

  // Payment/Invoice relations
  invoices      Invoice[]
  payments      Payment[]

  @@map("users")
}

// Lessons available for booking
model Lesson {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // Duration in minutes
  price       Decimal  @db.Decimal(10, 2)
  category    String?  // 'theory', 'practical', 'test'
  gearType    GearType?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  bookings       Booking[]
  packageLessons PackageLesson[]
  credits        Credit[]
  invoiceItems   InvoiceItem[]

  @@map("lessons")
}

// Packages from "Våra Tjänster"
model Package {
  id          String   @id @default(cuid())
  name        String
  description String?
  totalPrice  Decimal  @db.Decimal(10, 2)
  validityDays Int     @default(365) // How long credits are valid
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  packageLessons PackageLesson[]
  credits        Credit[]
  invoiceItems   InvoiceItem[]

  @@map("packages")
}

// Junction table for Package-Lesson relationships
model PackageLesson {
  id        String  @id @default(cuid())
  packageId String
  lessonId  String
  quantity  Int     @default(1)
  
  // Relations
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([packageId, lessonId])
  @@map("package_lessons")
}

// Credits system for lesson bookings
model Credit {
  id          String      @id @default(cuid())
  userId      String
  lessonId    String?     // Specific lesson type or null for general credits
  packageId   String?     // Source package if bought as package
  quantity    Int         @default(1)
  used        Int         @default(0)
  remaining   Int         @default(1)
  expiresAt   DateTime?
  purchasePrice Decimal?  @db.Decimal(10, 2)
  status      CreditStatus @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson?     @relation(fields: [lessonId], references: [id])
  package     Package?    @relation(fields: [packageId], references: [id])
  
  @@map("credits")
}

// Booking records
model Booking {
  id            String        @id @default(cuid())
  lessonId      String
  userId        String
  date          DateTime
  startTime     String        // Format: "HH:MM"
  endTime       String        // Format: "HH:MM"
  gearType      GearType
  status        BookingStatus @default(PENDING)
  totalPrice    Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod?
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?       // External payment ID
  creditUsed    Boolean       @default(false)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  lesson        Lesson        @relation(fields: [lessonId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  lessonPlanning LessonPlanning[]

  // Schedule relation (optional - for scheduled bookings)
  scheduleId    String?
  schedule      Schedule?     @relation("ScheduleBookings", fields: [scheduleId], references: [id])

  // Invoice relation
  invoiceItems  InvoiceItem[]

  @@map("bookings")
}

// Lesson planning and feedback
model LessonPlanning {
  id          String   @id @default(cuid())
  bookingId   String
  userId      String   // Student
  teacherId   String?  // Assigned teacher
  objectives  String?  // Lesson objectives
  content     String?  // Planned content
  feedback    String?  // Teacher feedback after lesson
  studentNotes String? // Student's own notes
  rating      Int?     // 1-5 rating
  status      PlanningStatus @default(PLANNED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  student     User     @relation(fields: [userId], references: [id])
  
  @@unique([bookingId])
  @@map("lesson_planning")
}

// Admin blocked time slots
model BlockedSlot {
  id        String   @id @default(cuid())
  date      DateTime
  startTime String   // Format: "HH:MM"
  endTime   String   // Format: "HH:MM"
  reason    String?
  isRecurring Boolean @default(false)
  recurringPattern String? // 'weekly', 'monthly', etc.
  createdAt DateTime @default(now())
  createdBy String

  // Relations
  creator   User     @relation(fields: [createdBy], references: [id])

  @@map("blocked_slots")
}

// Enhanced Schedule Management
model Schedule {
  id          String   @id @default(cuid())
  instructorId String
  date        DateTime
  startTime   String   // Format: "HH:MM"
  endTime     String   // Format: "HH:MM"
  isAvailable Boolean  @default(true)
  isRecurring Boolean  @default(false)
  recurringPattern String? // 'daily', 'weekly', 'monthly'
  recurringEndDate DateTime?
  maxBookings Int      @default(1) // How many students can book this slot
  currentBookings Int  @default(0)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  instructor  User     @relation(fields: [instructorId], references: [id])
  bookings    Booking[] @relation("ScheduleBookings")

  @@map("schedules")
}

// Working Hours Configuration
model WorkingHours {
  id          String   @id @default(cuid())
  dayOfWeek   Int      // 0 = Sunday, 1 = Monday, etc.
  startTime   String   // Format: "HH:MM"
  endTime     String   // Format: "HH:MM"
  isActive    Boolean  @default(true)
  breakStart  String?  // Optional break start time
  breakEnd    String?  // Optional break end time
  instructorId String? // Null for general hours, specific for instructor
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  instructor  User?    @relation(fields: [instructorId], references: [id])

  @@map("working_hours")
}

// Holiday and Special Days
model Holiday {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  isRecurring Boolean  @default(false) // For annual holidays
  description String?
  affectsSchedule Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("holidays")
}

// Payment and Invoice Management
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  userId        String
  totalAmount   Decimal       @db.Decimal(10, 2)
  taxAmount     Decimal       @db.Decimal(10, 2) @default(0)
  discountAmount Decimal      @db.Decimal(10, 2) @default(0)
  finalAmount   Decimal       @db.Decimal(10, 2)
  currency      String        @default("SEK")
  status        InvoiceStatus @default(DRAFT)
  dueDate       DateTime
  paidDate      DateTime?
  description   String?
  notes         String?

  // Invoice details
  billingAddress Json?        // Structured billing address
  companyInfo   Json?         // Company information if B2B
  taxRate       Decimal       @db.Decimal(5, 2) @default(25.00) // Swedish VAT

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user          User          @relation(fields: [userId], references: [id])
  invoiceItems  InvoiceItem[]
  payments      Payment[]

  @@map("invoices")
}

// Invoice line items
model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  taxRate     Decimal  @db.Decimal(5, 2) @default(25.00)

  // Optional relations to specific items
  lessonId    String?
  packageId   String?
  bookingId   String?

  createdAt   DateTime @default(now())

  // Relations
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])
  package     Package? @relation(fields: [packageId], references: [id])
  booking     Booking? @relation(fields: [bookingId], references: [id])

  @@map("invoice_items")
}

// Payment records
model Payment {
  id              String        @id @default(cuid())
  invoiceId       String?       // Can be null for direct payments
  userId          String
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("SEK")
  paymentMethod   PaymentMethod
  status          PaymentStatus @default(PENDING)

  // External payment provider details
  externalId      String?       // Payment provider transaction ID
  providerName    String?       // 'stripe', 'swish', 'klarna', etc.
  providerResponse Json?        // Full response from payment provider

  // Payment details
  paidAt          DateTime?
  failedAt        DateTime?
  refundedAt      DateTime?
  refundAmount    Decimal?      @db.Decimal(10, 2)
  failureReason   String?

  // Metadata
  description     String?
  metadata        Json?         // Additional payment metadata

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id])
  invoice         Invoice?      @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum GearType {
  AUTOMATIC
  MANUAL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  SWISH
  INVOICE
  CREDIT
  BANK_TRANSFER
  KLARNA
  PAYPAL
  CASH
}

enum CreditStatus {
  ACTIVE
  EXPIRED
  USED
  CANCELLED
}

enum PlanningStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}
