// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  blockedSlots  BlockedSlot[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

// Lessons available for booking
model Lesson {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // Duration in minutes
  price       Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  bookings    Booking[]
}

// Admin settings for lesson timing
model AdminSettings {
  id              String @id @default(cuid())
  settingKey      String @unique
  settingValue    String
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Time slots that are blocked by admin
model BlockedSlot {
  id        String   @id @default(cuid())
  date      DateTime
  startTime String   // Format: "HH:MM"
  endTime   String   // Format: "HH:MM"
  reason    String?
  createdAt DateTime @default(now())
  createdBy String
  
  // Relations
  creator   User     @relation(fields: [createdBy], references: [id])
}

// Booking records
model Booking {
  id            String        @id @default(cuid())
  lessonId      String
  userId        String
  date          DateTime
  startTime     String        // Format: "HH:MM"
  endTime       String        // Format: "HH:MM"
  gearType      GearType
  status        BookingStatus @default(PENDING)
  totalPrice    Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod?
  paymentStatus PaymentStatus @default(PENDING)
  paymentId     String?       // External payment ID from Qliro/Swish
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  lesson        Lesson        @relation(fields: [lessonId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
}

enum GearType {
  AUTOMATIC
  MANUAL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  QLIRO
  SWISH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
